import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/material.dart';
import 'package:my_tiffin/models/items.dart';
import 'package:my_tiffin/uploadScreen/item_upload_screen.dart';
import 'package:my_tiffin/widgets/progress_bar.dart';
import '../../models/menu.dart';
import '../../uploadScreen/menu_upload_screen.dart';
import 'item_of_category.dart';
class StaffCategoryItem extends StatefulWidget {
  final Menu? model;

  StaffCategoryItem({this.model});

  @override
  State<StaffCategoryItem> createState() => _StaffCategoryItemState();
}
class _StaffCategoryItemState extends State<StaffCategoryItem> with TickerProviderStateMixin {

  int currentTab = 0;
  bool isButtonClicked = false;
  late TabController _tabController;
  late IconData icon;
  int lastSelectedTab = 0;
  List<Tab> _tabs = [];
  List<Menu> _menus = []; // Using Menu model to store menu data
  List<Items> _items = [];

  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
    _tabController.addListener(_handleTabChange);
    _fetchTabsFromFirebase();
  }
  @override

// staff_item_screens/staff_category_item.dart

  void _fetchTabsFromFirebase() async {
    Stream<QuerySnapshot> stream =
    FirebaseFirestore.instance.collection('menus').snapshots();

    stream.listen((QuerySnapshot snapshot) {
      setState(() {
        _menus = snapshot.docs
            .map((doc) => Menu.fromJson(doc.data()! as Map<String, dynamic>))
            .toList();
        _menus.add(Menu(menuTitle: 'Add')); // Add the external permanent tab
        _tabs = _menus.map((menu) => Tab(text: menu.menuTitle!)).toList();
        _tabController = TabController(length: _tabs.length, vsync: this);

        // Set the selectedTab based on the initial model's menuId
        if (widget.model != null) {
          for (int i = 0; i < _menus.length; i++) {
            if (_menus[i].menuId == widget.model!.menuId) {
              _tabController.index = i;
              break;
            }
          }
        }
      });
    });
  }

  void handleButtonClicked(bool isClicked) {

    if (isClicked) {
      // Button inside MenuUploadScreen is clicked
      setState(() {
        isButtonClicked = isClicked;
      });
    }
  }
  // void _handleTabChange() {
  //   if (isButtonClicked && _tabController.indexIsChanging) {
  //     int lastIndex = _tabController.length - 1;
  //     int currentTab = _tabController.index;
  //
  //     // Check if the user tries to switch from the last tab with the "add" icon to other tabs.
  //     if (lastSelectedTab == lastIndex && currentTab != lastIndex) {
  //       // Show the error dialog when trying to switch from the last tab to other tabs.
  //       showDialog(
  //         context: context,
  //         builder: (context) {
  //           return AlertDialog(
  //             content: Text(
  //               'Are you sure you want to exit? You will lose any unsaved progress.',
  //             ),
  //             actions: [
  //               TextButton(
  //                 onPressed: () {
  //                   setState(() {
  //                     isButtonClicked = true;
  //                   });
  //                   _tabController.animateTo(lastSelectedTab);
  //                   Navigator.of(context).pop();
  //                 },
  //                 child: Text('No'),
  //               ),
  //               TextButton(
  //                 onPressed: () {
  //                   setState(() {
  //                     isButtonClicked = false;
  //                   });
  //                   Navigator.of(context).pop();
  //                 },
  //                 child: Text('Exit'),
  //               ),
  //             ],
  //           );
  //         },
  //       );
  //       // Prevent switching to other tabs from the last tab.
  //       _tabController.animateTo(lastSelectedTab);
  //     } else {
  //       // Allow switching to the last tab and remember the last selected tab index.
  //       lastSelectedTab = currentTab;
  //       print("Current Tab Index: $currentTab");
  //
  //       // Store the selected tab in the Menu model.
  //       if (currentTab < _menus.length) {
  //         setState(() {
  //           _menus[currentTab].updateSelectedTab(_tabs[currentTab].text!);
  //           print("Updated selectedTab: ${_menus[currentTab].selectedTab}");
  //         });
  //       }
  //     }
  //   }
  // }
  void _handleTabChange() {
    debugPrint("Current Tab Index: ${_tabController.index}");
    print("_handleTabChange is called"); // Add this line
    if (_tabController.indexIsChanging) {
      // Print the index of the current tab when it changes
      print("Current Tab Index: ${_tabController.index}");

      // ... Rest of your existing code ...
      int lastIndex = _tabController.length - 1;
      int currentTab = _tabController.index;

      // Check if the user tries to switch from the last tab with the "add" icon to other tabs.
      if (lastSelectedTab == lastIndex && currentTab != lastIndex) {
        // Show the error dialog when trying to switch from the last tab to other tabs.
        showDialog(
          context: context,
          builder: (context) {
            return AlertDialog(
              content: Text(
                'Are you sure you want to exit? You will lose any unsaved progress.',
              ),
              actions: [
                TextButton(
                  onPressed: () {
                    setState(() {
                      isButtonClicked = true;
                    });
                    _tabController.animateTo(lastSelectedTab);
                    Navigator.of(context).pop();
                  },
                  child: Text('No'),
                ),
                TextButton(
                  onPressed: () {
                    setState(() {
                      isButtonClicked = false;
                    });
                    Navigator.of(context).pop();
                  },
                  child: Text('Exit'),
                ),
              ],
            );
          },
        );
        // Prevent switching to other tabs from the last tab.
        _tabController.animateTo(lastSelectedTab);
      } else {
        // Allow switching to the last tab and remember the last selected tab index.
        lastSelectedTab = currentTab;
        print("Current Tab Index: $currentTab");

        // Store the selected tab in the Menu model.
        if (currentTab < _menus.length) {
          setState(() {
            _menus[currentTab].updateSelectedTab(_tabs[currentTab].text!);
            print("Updated selectedTab: ${_menus[currentTab].selectedTab}");
          });
        }
      }
    }
  }




  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return _tabs.isEmpty
        ? linearProgress()
        : Container(
      width: MediaQuery.of(context).size.width * 0.1,
      height: MediaQuery.of(context).size.height * 0.8,
      child: Scaffold(
        appBar: AppBar(
          automaticallyImplyLeading: false,
          backgroundColor: Colors.white,
          elevation: 0,
          bottom: TabBar(
            labelStyle: const TextStyle(
              fontWeight: FontWeight.bold,
              fontSize: 20,
            ),
            indicatorColor: Colors.transparent,
            isScrollable: true,
            controller: _tabController,
            labelColor: Colors.green,
            unselectedLabelColor: Colors.grey,
            physics: NeverScrollableScrollPhysics(),
            labelPadding: const EdgeInsets.fromLTRB(5, 2, 25, 2),
            tabs: _tabs,
          ),
        ),
        body: Padding(
          padding: const EdgeInsets.all(8.0),
          child: TabBarView(
            controller: _tabController,
            physics: NeverScrollableScrollPhysics(),
            children: [
              CategoryItemWidget(
                model: widget.model,
                // onButtonClicked: handleButtonClicked,
              ),
              MenuUploadScreen(
                // onButtonClicked: handleButtonClicked,
                model: widget.model,
              ),
            ],
          ),
        ),

      ),
    );
  }
}
